import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm" version "2.1.20"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
//    mavenCentral()
}

fabricApi {
    configureDataGeneration {
        client = true
        modId = "cooparticlesapi"
    }
}

configurations {
    embed
    implementation.extendsFrom(embed)
}
dependencies {
    // To change the versions see the gradle.properties file
    minecraft "net.minecraft:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
    modImplementation fileTree(dir: "depend", includes: ["*.jar"])

    embed fileTree(dir: "depend", includes: ["*.jar"])
    modCompileOnlyApi fileTree(dir: "source", includes: ["*.jar"])
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": inputs.properties.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = 21
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    inputs.property "archivesName", project.base.archivesName
    from("LICENSE") {
        rename { "${it}_${inputs.properties.archivesName}" }
    }
    from(configurations.embed.collect {
        it.isDirectory() ? it : zipTree(it)
    }) {
        // 排除可能冲突的文件
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}


tasks.register('jarWithoutDataGen', Jar) {
    group = "build"
    description = "用于生成没有fabric模组信息的加载器, 需要在run的mods文件里搭配运行环境"
    archiveBaseName = "${archiveBaseName.get()}-without-datagen"
    inputs.property "archivesName", project.base.archivesName
    from("LICENSE") {
        rename { "${it}_${inputs.properties.archivesName}" }
    }
    from(configurations.embed.collect {
        it.isDirectory() ? it : zipTree(it)
    }) {
        // 排除可能冲突的文件
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    from(sourceSets.main.output) {}
    filesMatching("fabric.mod.json") {
        def json = new JsonSlurper().parseText(it.file.text)
        if (json.entrypoints && json.entrypoints.'fabric-datagen') {
            json.entrypoints.remove('fabric-datagen')
        }

        // 重新生成 JSON 并写入文件
        def updatedJson = JsonOutput.prettyPrint(JsonOutput.toJson(json))
        it.file.text = updatedJson
    }
}
tasks.register("lib_build"){
    group = "build"
}

lib_build.dependsOn build,jarWithoutDataGen
// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}